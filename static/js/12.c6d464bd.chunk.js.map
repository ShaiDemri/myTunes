{"version":3,"sources":["containers/RestrictedRoute.jsx","configs/routes.jsx","configs/config.js","store/auth/reducer.js","store/media/reducer.js","store/tune/reducer.js","store/reducers.js","store/api/index.js","store/auth/sagas.js","store/media/sagas.js","store/tune/sagas.js","store/sagas.js","store/index.js","containers/Home.jsx","App.jsx","store/auth/types.js","store/media/types.js","store/tune/types.js"],"names":["RestrictedRoute","type","Component","component","fallbackComponent","FallbackComponent","rest","isAuthorised","undefined","useSelector","state","auth","render","props","to","pathname","location","from","search","Loading","CircularProgress","AsyncSignUp","Loadable","loader","loading","AsyncSearchTunes","AsyncTune","AsyncPageNotFound","config","routes","path","exact","landingPage","initialState","user","top10","media","selectedTune","appReducer","combineReducers","action","types","data","results","tune","console","log","rootReducer","USER_LOGOUT","apiUrl","callServer","url","method","headers","axios","login","signUp","logout","loginSaga","signupSaga","logoutSaga","payload","email","password","call","put","USER_LOGIN_SUCCEEDED","USER_LOGIN","message","firstName","surName","USER_SIGNUP_SUCCEEDED","USER_SIGNUP","USER_LOGOUT_SUCCEEDED","takeEvery","authSagas","fetchMedia","fetchTop10","fetchMediaSaga","fetchTop10Saga","getUserEmail","select","query","FETCH_MEDIA_SUCCESS","FETCH_MEDIA","error","cancelled","FETCH_TOP10_SUCCESS","FETCH_TOP10","mediaSagas","getSelectedTune","selectedTuneSaga","getSelectedTuneSaga","SELECTED_TUNE_SUCCESS","SELECTED_TUNE","GET_SELECTED_TUNE_SUCCESS","GET_SELECTED_TUNE","tuneSagas","rootSaga","all","configureStore","createLogger","store","sagaMiddleware","createSagaMiddleware","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","applyMiddleware","persistorConfig","key","storage","blacklist","reducer","persistReducer","createStore","run","persistStore","e","RootAsync","App","appConfig","configs","basename","process","Main","Home"],"mappings":"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","file":"static/js/12.c6d464bd.chunk.js","sourcesContent":["import React from 'react'\nimport {useSelector} from 'react-redux'\nimport {Route, Redirect} from 'react-router'\n\nexport const RestrictedRoute = ({type, component: Component, fallbackComponent: FallbackComponent = false, ...rest}) => {\n    const isAuthorised = useSelector(state => state.auth.isAuthorised) !== undefined;\n    return (\n        <Route\n            {...rest}\n            render={props => {\n                if ((isAuthorised && type === 'private') || (!isAuthorised && type === 'public')) {\n                    return <Component {...props} />\n                } else if (FallbackComponent) {\n                    return <FallbackComponent {...props} />\n                } else {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname:\n                                    type === 'private' ? '/signup' : props.location.state ? props.location.state.from.pathname : '/',\n                                search: `from=${props.location.pathname}`,\n                                state: {from: props.location}\n                            }}\n                        />\n                    )\n                }\n            }}\n        />\n    )\n};\n\n\nexport default RestrictedRoute;\n","/* eslint-disable react/jsx-key */\nimport React from 'react'\nimport RestrictedRoute from '../containers/RestrictedRoute'\nimport Loadable from 'react-loadable'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Loading = () => <CircularProgress />;\n\nconst AsyncSignUp = Loadable({ loader: () => import('../pages/SignUp'), loading: Loading});\nconst AsyncSearchTunes = Loadable({ loader: () => import('../pages/SearchTunes'), loading: Loading });\nconst AsyncTune = Loadable({ loader: () => import('../pages/Tune'), loading: Loading });\nconst AsyncPageNotFound = Loadable({ loader: () => import('../pages/PageNotFound'), loading: Loading });\n\n\nconst routes = [\n    <RestrictedRoute type=\"public\" path=\"/signup\" exact component={AsyncSignUp} />,\n    <RestrictedRoute type=\"private\" path=\"/tune/:tuneId\" component={AsyncTune} />,\n    <RestrictedRoute type=\"private\" path=\"/searchTune\" exact component={AsyncSearchTunes} />,\n    <RestrictedRoute type=\"public\" path = \"/\" component={AsyncPageNotFound} />\n];\n\nexport default routes\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport routes from './routes'\n\nconst Loading = () => <CircularProgress />;\n\nconst LPAsync = Loadable({\n    loader: () => import('../pages/SignUp'),\n    loading: Loading\n});\n\nconst config = {\n    routes,\n    landingPage: LPAsync\n};\n\nexport default config\n","import * as types from './types'\n\nconst initialState = {\n    user: undefined\n};\n\nexport default function auth(state = initialState, action) {\n\n    switch (action.type) {\n        case types.USER_LOGOUT_SUCCEEDED:\n            return {\n                ...state,\n                user: undefined\n            };\n        case types.USER_LOGIN_SUCCEEDED:\n            return {\n                ...state,\n                user: action.user\n            };\n\n        case types.USER_SIGNUP_SUCCEEDED:\n            return {\n                ...state,\n                user: action.user\n            };\n        default:\n            return state\n    }\n}\n","import * as types from './types'\n\nconst initialState = {\n    top10:[],\n    media:[],\n};\n\nexport default function media(state = initialState, action) {\n\n    switch (action.type) {\n        case types.FETCH_MEDIA_SUCCESS:\n            return {\n                ...state,\n                media: action.media.data.results\n            };\n        case types.FETCH_TOP10_SUCCESS:\n            return {\n                ...state,\n                top10: action.top10.data\n            };\n        default:\n            return state\n    }\n}\n","import * as types from './types'\n\nconst initialState = {\n    selectedTune:undefined\n};\n\nexport default function tune(state = initialState, action) {\n\n    switch (action.type) {\n        case types.GET_SELECTED_TUNE_SUCCESS:\n            console.log(action);\n            return {\n                ...state,\n                selectedTune:action.tune\n            };\n        case types.SELECTED_TUNE_SUCCESS:\n            console.log(action);\n            return {\n                ...state,\n                selectedTune:action.tune\n            };\n        default:\n            return state\n    }\n}\n","import auth from './auth/reducer'\nimport media from './media/reducer'\nimport tune from './tune/reducer'\nimport { combineReducers } from 'redux'\nimport {USER_LOGOUT} from './auth/types'\n\nconst appReducer = combineReducers({\n    auth,\n    media,\n    tune\n});\n\nconst rootReducers = (state, action) => {\n    if (action.type === USER_LOGOUT) {\n        state = undefined\n    }\n    return appReducer(state, action)\n};\n export const rootReducer = rootReducers;\n","import axios from \"axios\";\n\nconst apiUrl = 'https://my-tune.herokuapp.com';\n\n\nexport const callServer = (url, method = 'get', data = undefined,headers=undefined) => {\n    return axios({\n        url: apiUrl+url,\n        method: method,\n        headers:headers,\n        data: data,\n    })\n};","import {\n    call,\n    put,\n    takeEvery\n} from 'redux-saga/effects'\nimport {callServer} from '../api'\n\nimport {USER_LOGOUT, USER_LOGIN, USER_SIGNUP,USER_LOGIN_SUCCEEDED,USER_LOGOUT_SUCCEEDED,USER_SIGNUP_SUCCEEDED} from './types'\n\nfunction* login(payload) {\n    const {email, password}= payload;\n    try {\n        const user = yield call(callServer, '/user/login/','post',{email, password});\n        yield put({\n            type: USER_LOGIN_SUCCEEDED,\n            user: user\n        });\n    } catch (e) {\n        yield put({\n            type: USER_LOGIN + \"_FAILED\",\n            message: e.message\n        });\n    }\n}\n\nfunction* signUp(payload) {\n    const {email, password, firstName, surName}= payload;\n    try {\n        const user = yield call(callServer, '/user/signup/','post',{email, password, firstName, surName} );\n        yield put({\n            type: USER_SIGNUP_SUCCEEDED,\n            user: user\n        });\n    } catch (e) {\n        yield put({\n            type: USER_SIGNUP + \"_FAILED\",\n            message: e.message\n        });\n    }\n}\n\nfunction* logout() {\n    try {\n        yield call(callServer, '/user/logout/','post');\n        yield put({\n            type: USER_LOGOUT_SUCCEEDED,\n            user: null\n        });\n    } catch (e) {\n        yield put({\n            type: USER_LOGOUT + \"_FAILED\",\n            message: e.message\n        });\n    }\n}\n\nfunction* loginSaga(payload) {\n    yield takeEvery(USER_LOGIN, login);\n}\n\nfunction* signupSaga(payload) {\n    yield takeEvery(USER_SIGNUP, signUp);\n}\n\nfunction* logoutSaga() {\n    yield takeEvery(USER_LOGOUT, logout);\n}\n\nexport const authSagas = [\n    call(loginSaga),\n    call(signupSaga),\n    call(logoutSaga)\n];","import {\n    call,\n    put,\n    takeEvery,\n    cancelled,\n    select\n} from 'redux-saga/effects'\nimport {\n    FETCH_MEDIA,\n    FETCH_MEDIA_SUCCESS,\n    FETCH_TOP10,\n    FETCH_TOP10_SUCCESS\n} from './types'\n\nimport {callServer} from '../api'\n\nconst getUserEmail = state => state.auth.user.data.user.email;\n\n// worker saga\nexport function* fetchMedia(payload) {\n    const email = yield select(getUserEmail);\n    try {\n        const media = yield call(callServer, '/media/' + payload.query,'get',undefined,{\"email\":email});\n        yield put({type: FETCH_MEDIA_SUCCESS, media});\n        return media\n    } catch (error) {\n        console.log(error);\n        yield put({type: FETCH_MEDIA + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\n\n// worker saga\nexport function* fetchTop10() {\n    const email = yield select(getUserEmail);\n    try {\n        const top10 = yield call(callServer, '/media/top10','get',undefined,{\"email\":email});\n        yield put({type: FETCH_TOP10_SUCCESS, top10});\n        return top10\n    } catch (error) {\n        console.log(error);\n        yield put({type: FETCH_TOP10 + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\n\nfunction* fetchMediaSaga(payload) {\n    yield takeEvery(FETCH_MEDIA, fetchMedia);\n}\n\nfunction* fetchTop10Saga() {\n    yield takeEvery(FETCH_TOP10, fetchTop10);\n}\n\nexport const mediaSagas = [\n    call(fetchMediaSaga),\n    call(fetchTop10Saga),\n];","import {\n    call,\n    put,\n    takeEvery,\n    cancelled,\n    select\n} from 'redux-saga/effects'\nimport {\n    GET_SELECTED_TUNE,\n    GET_SELECTED_TUNE_SUCCESS,\n    SELECTED_TUNE,\n    SELECTED_TUNE_SUCCESS\n} from './types'\n\nimport {callServer} from '../api'\n\nexport function* selectedTune(payload) {\n    const {tune} = payload;\n    try {\n        yield put({type: SELECTED_TUNE_SUCCESS, tune});\n        yield call(callServer, '/media/selected','post',tune);\n        return tune\n    } catch (error) {\n        console.log(error);\n        yield put({type: SELECTED_TUNE + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\n\n// worker saga\nexport function* getSelectedTune() {\n    try {\n        const tune = yield call(callServer, '/media/selected');\n        yield put({type: GET_SELECTED_TUNE_SUCCESS, tune});\n        return tune\n    } catch (error) {\n        console.log(error);\n        yield put({type: GET_SELECTED_TUNE + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\n\nfunction* selectedTuneSaga(payload) {\n    yield takeEvery(SELECTED_TUNE, selectedTune);\n}\nfunction* getSelectedTuneSaga() {\n    yield takeEvery(GET_SELECTED_TUNE, getSelectedTune);\n}\nexport const tuneSagas = [\n    call(selectedTuneSaga),\n    call(getSelectedTuneSaga)\n];","import { authSagas } from './auth/sagas';\nimport { mediaSagas } from './media/sagas';\nimport { tuneSagas } from './tune/sagas';\nimport { all } from 'redux-saga/effects'\n\nexport default function* rootSaga() {\n    yield all([\n        ...authSagas,\n        ...mediaSagas,\n        ...tuneSagas\n    ])\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport storage from 'redux-persist/lib/storage';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { rootReducer } from './reducers'\nimport rootSaga from './sagas'\n\nexport default function configureStore() {\n    let store;\n\n    const logger = createLogger({});\n    const sagaMiddleware = createSagaMiddleware();\n\n    let middlewares = [\n        sagaMiddleware\n    ];\n\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n        middlewares.push(logger) // DEV middlewares\n    }\n\n    const composeEnhancers =\n        typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace:true\n                // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n            })\n            : compose;\n\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n    const persistorConfig = {\n        key: 'root',\n        storage,\n        blacklist: ['media']\n    };\n\n    const reducer = persistReducer(persistorConfig, rootReducer);\n\n    store = createStore(reducer, enhancer);\n\n    sagaMiddleware.run(rootSaga);\n\n    try {\n        persistStore(store)\n    } catch (e) {\n        console.log(e)\n    }\n\n    return store\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Loadable from 'react-loadable'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport config from '../configs/config'\nimport configureStore from '../store'\n\nconst Loading = () => <CircularProgress />;\n\nexport const RootAsync = Loadable({\n    loader: () => import('./Root'),\n    loading: Loading\n});\n\n\nconst App = ({ appConfig }) => {\n    const store = appConfig && appConfig.configureStore ? appConfig.configureStore() : configureStore();\n    const configs = { ...config, ...appConfig };\n\n    return (\n            <Provider store={store}>\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\n                        <Switch>\n                            <Route>\n                                <RootAsync appConfig={configs} />\n                            </Route>\n                        </Switch>\n\n                </BrowserRouter>\n            </Provider>\n    )\n};\n\nexport default App\n","import React from 'react';\nimport config from './configs/config';\nimport configureStore from './store';\nimport Home from './containers/Home.jsx';\n\nconst Main = () => <Home appConfig={{ configureStore, ...config }} />;\n\nexport default Main\n","const namespace = 'AUTH';\n\nexport const USER_LOGOUT = `${namespace}@USER_LOGOUT`;\nexport const USER_LOGOUT_SUCCEEDED = `${namespace}@USER_LOGOUT_SUCCEEDED`;\nexport const USER_LOGIN = `${namespace}@USER_LOGIN`;\nexport const USER_LOGIN_SUCCEEDED = `${namespace}@USER_LOGIN`;\nexport const USER_SIGNUP = `${namespace}@USER_SIGNUP`;\nexport const USER_SIGNUP_SUCCEEDED = `${namespace}@USER_SIGNUP_SUCCEEDED`;\n","const namespace = 'MEDIA';\n\nexport const FETCH_MEDIA = `${namespace}@FETCH_MEDIA`;\nexport const FETCH_MEDIA_SUCCESS = `${namespace}@FETCH_MEDIA_SUCCESS`;\nexport const FETCH_TOP10 = `${namespace}@FETCH_TOP10`;\nexport const FETCH_TOP10_SUCCESS = `${namespace}@FETCH_TOP10_SUCCESS`;\n\n","const namespace = 'MEDIA';\n\nexport const FETCH_MEDIA = `${namespace}@FETCH_MEDIA`;\nexport const FETCH_MEDIA_SUCCESS = `${namespace}@FETCH_MEDIA_SUCCESS`;\nexport const FETCH_TOP10 = `${namespace}@FETCH_TOP10`;\nexport const FETCH_TOP10_SUCCESS = `${namespace}@FETCH_TOP10_SUCCESS`;\nexport const SELECTED_TUNE = `${namespace}@SELECTED_TUNE`;\nexport const SELECTED_TUNE_SUCCESS = `${namespace}@SELECTED_TUNE_SUCCESS`;\nexport const GET_SELECTED_TUNE = `${namespace}@GET_SELECTED_TUNE`;\nexport const GET_SELECTED_TUNE_SUCCESS = `${namespace}@GET_SELECTED_TUNE_SUCCESS`;\n\n"],"sourceRoot":""}